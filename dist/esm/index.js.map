{
  "version": 3,
  "sources": ["../../src/instantiateKissFFTModuleFromFile.ts", "../../src/KissFFT.ts"],
  "sourcesContent": ["import type { KissFFTModuleFactory } from \"./types\";\n\n/**\n * Load emcc-wasm files, than instantiate it\n * @param jsFile path to `emcc-wasm.js`\n * @param wasmFile path to `emcc-wasm.wasm`\n * @param dataFile path to `emcc-wasm.data`\n */\nconst instantiateKissFFTModuleFromFile = async (jsFile: string, wasmFile = jsFile.replace(/c?js$/, \"wasm\"), dataFile = jsFile.replace(/c?js$/, \"data\")) => {\n    let Module: KissFFTModuleFactory;\n    // let dataBinary: ArrayBuffer;\n    let wasmBinary: Uint8Array | ArrayBuffer;\n    const jsCodeHead = /var (.+) = \\(\\(\\) => \\{/;\n    if (typeof globalThis.fetch === \"function\") {\n        let jsCode = await (await fetch(jsFile)).text();\n        jsCode = `${jsCode}\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = URL.createObjectURL(new Blob([jsCode], { type: \"text/javascript\" }));\n        Module = (await import(/* webpackIgnore: true */jsFileMod)).default;\n        // dataBinary = await (await fetch(dataFile)).arrayBuffer();\n        wasmBinary = new Uint8Array(await (await fetch(wasmFile)).arrayBuffer());\n    } else {\n        const { promises: fs } = await import(\"fs\");\n        const { pathToFileURL } = await import(\"url\");\n        let jsCode = (await fs.readFile(jsFile, { encoding: \"utf-8\" }));\n        jsCode = `\nimport process from \"process\";\nimport * as path from \"path\";\nimport { createRequire } from \"module\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst __filename = fileURLToPath(import.meta.url);\nconst require = createRequire(import.meta.url);\n\n${jsCode}\n\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = jsFile.replace(/c?js$/, \"mjs\");\n        await fs.writeFile(jsFileMod, jsCode);\n        Module = (await import(/* webpackIgnore: true */pathToFileURL(jsFileMod).href)).default;\n        await fs.unlink(jsFileMod);\n        // dataBinary = (await fs.readFile(dataFile)).buffer;\n        wasmBinary = (await fs.readFile(wasmFile)).buffer;\n    }\n    const module = await Module({\n        wasmBinary/*,\n        getPreloadedPackage: (remotePackageName: string, remotePackageSize: number) => {\n            if (remotePackageName === \"libfaust-wasm.data\") return dataBinary;\n            return new ArrayBuffer(0);\n        }*/\n    });\n    return module;\n};\n\nexport default instantiateKissFFTModuleFromFile;\n", "import type { InterfaceFFT, KissFFTModule } from \"./types\";\r\n\r\nclass KissFFT {\r\n    private _FFT: new (size: number) => InterfaceFFT;\r\n    private _FFTR: new (size: number) => InterfaceFFT;\r\n    constructor(kissFFTModule: KissFFTModule) {\r\n        const {\r\n            _kiss_fftr_alloc,\r\n            _kiss_fftr,\r\n            _kiss_fftri,\r\n            _kiss_fft,\r\n            _kiss_fft_alloc,\r\n            _kiss_fft_cleanup,\r\n            _free,\r\n            _malloc\r\n        } = kissFFTModule;\r\n        class FFT implements InterfaceFFT {\r\n            size: number;\r\n            fcfg: number;\r\n            icfg: number;\r\n            inptr: number;\r\n            outptr: number;\r\n            cin: Float32Array;\r\n            cout: Float32Array;\r\n            constructor(size: number) {\r\n                this.size = size;\r\n                this.fcfg = _kiss_fft_alloc(size, false);\r\n                this.icfg = _kiss_fft_alloc(size, true);\r\n\r\n                this.inptr = kissFFTModule._malloc(size * 8 + size * 8);\r\n                this.outptr = this.inptr + size * 8;\r\n\r\n                this.cin = new Float32Array(kissFFTModule.HEAPU8.buffer, this.inptr, size * 2);\r\n                this.cout = new Float32Array(kissFFTModule.HEAPU8.buffer, this.outptr, size * 2);\r\n            }\r\n\r\n            forward(cin: ArrayLike<number> | ((arr: Float32Array) => any)) {\r\n                if (typeof cin === \"function\") cin(this.cin);\r\n                else this.cin.set(cin);\r\n                _kiss_fft(this.fcfg, this.inptr, this.outptr);\r\n                return this.cout;\r\n            }\r\n\r\n            inverse(cpx: ArrayLike<number> | ((arr: Float32Array) => any)) {\r\n                if (typeof cpx === \"function\") cpx(this.cin);\r\n                else this.cin.set(cpx);\r\n                _kiss_fft(this.icfg, this.inptr, this.outptr);\r\n                return this.cout;\r\n            }\r\n\r\n            dispose() {\r\n                _free(this.inptr);\r\n                _kiss_fft_cleanup();\r\n            }\r\n        }\r\n        class FFTR implements InterfaceFFT {\r\n            size: number;\r\n            fcfg: number;\r\n            icfg: number;\r\n            rptr: number;\r\n            cptr: number;\r\n            ri: Float32Array;\r\n            ci: Float32Array;\r\n            constructor(size: number) {\r\n                this.size = size;\r\n                this.fcfg = _kiss_fftr_alloc(size, false);\r\n                this.icfg = _kiss_fftr_alloc(size, true);\r\n\r\n                this.rptr = _malloc(size * 4 + (size + 2) * 4);\r\n                this.cptr = this.rptr + size * 4;\r\n\r\n                this.ri = new Float32Array(kissFFTModule.HEAPU8.buffer, this.rptr, size);\r\n                this.ci = new Float32Array(kissFFTModule.HEAPU8.buffer, this.cptr, size + 2);\r\n            }\r\n            forward(real: ArrayLike<number> | ((arr: Float32Array) => any)) {\r\n                if (typeof real === \"function\") real(this.ri);\r\n                else this.ri.set(real);\r\n                _kiss_fftr(this.fcfg, this.rptr, this.cptr);\r\n                return this.ci;\r\n            }\r\n            inverse(cpx: ArrayLike<number> | ((arr: Float32Array) => any)) {\r\n                if (typeof cpx === \"function\") cpx(this.ci);\r\n                else this.ci.set(cpx);\r\n\t            _kiss_fftri(this.icfg, this.cptr, this.rptr);\r\n\t            return this.ri;\r\n            }\r\n            dispose() {\r\n                _free(this.rptr);\r\n                _kiss_fft_cleanup();\r\n            }\r\n        }\r\n        this._FFT = FFT;\r\n        this._FFTR = FFTR;\r\n    }\r\n    get FFT() { return this._FFT }\r\n    get FFTR() { return this._FFTR }\r\n}\r\n\r\nexport default KissFFT;\r\n"],
  "mappings": "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",
  "names": []
}
