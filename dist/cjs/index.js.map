{
  "version": 3,
  "sources": ["../../src/instantiateKissFFTModuleFromFile.ts", "../../src/KissFFT.ts"],
  "sourcesContent": ["import type { KissFFTModuleFactory } from \"./types\";\n\n/**\n * Load emcc-wasm files, than instantiate it\n * @param jsFile path to `emcc-wasm.js`\n * @param wasmFile path to `emcc-wasm.wasm`\n * @param dataFile path to `emcc-wasm.data`\n */\nconst instantiateKissFFTModuleFromFile = async (jsFile: string, wasmFile = jsFile.replace(/c?js$/, \"wasm\"), dataFile = jsFile.replace(/c?js$/, \"data\")) => {\n    let Module: KissFFTModuleFactory;\n    // let dataBinary: ArrayBuffer;\n    let wasmBinary: Uint8Array | ArrayBuffer;\n    const jsCodeHead = /var (.+) = \\(\\(\\) => \\{/;\n    if (typeof globalThis.fetch === \"function\") {\n        let jsCode = await (await fetch(jsFile)).text();\n        jsCode = `${jsCode}\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = URL.createObjectURL(new Blob([jsCode], { type: \"text/javascript\" }));\n        Module = (await import(/* webpackIgnore: true */jsFileMod)).default;\n        // dataBinary = await (await fetch(dataFile)).arrayBuffer();\n        wasmBinary = new Uint8Array(await (await fetch(wasmFile)).arrayBuffer());\n    } else {\n        const { promises: fs } = await import(\"fs\");\n        const { pathToFileURL } = await import(\"url\");\n        let jsCode = (await fs.readFile(jsFile, { encoding: \"utf-8\" }));\n        jsCode = `\nimport process from \"process\";\nimport * as path from \"path\";\nimport { createRequire } from \"module\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst __filename = fileURLToPath(import.meta.url);\nconst require = createRequire(import.meta.url);\n\n${jsCode}\n\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = jsFile.replace(/c?js$/, \"mjs\");\n        await fs.writeFile(jsFileMod, jsCode);\n        Module = (await import(/* webpackIgnore: true */pathToFileURL(jsFileMod).href)).default;\n        await fs.unlink(jsFileMod);\n        // dataBinary = (await fs.readFile(dataFile)).buffer;\n        wasmBinary = (await fs.readFile(wasmFile)).buffer;\n    }\n    const module = await Module({\n        wasmBinary/*,\n        getPreloadedPackage: (remotePackageName: string, remotePackageSize: number) => {\n            if (remotePackageName === \"libfaust-wasm.data\") return dataBinary;\n            return new ArrayBuffer(0);\n        }*/\n    });\n    return module;\n};\n\nexport default instantiateKissFFTModuleFromFile;\n", "import type { InterfaceFFT, KissFFTModule } from \"./types\";\r\n\r\nclass KissFFT {\r\n    FFT: new (size: number) => InterfaceFFT;\r\n    FFTR: new (size: number) => InterfaceFFT;\r\n    constructor(kissFFTModule: KissFFTModule) {\r\n        const {\r\n            _kiss_fftr_alloc,\r\n            _kiss_fftr,\r\n            _kiss_fftri,\r\n            _kiss_fft,\r\n            _kiss_fft_alloc,\r\n            _kiss_fft_cleanup,\r\n            _free,\r\n            _malloc\r\n        } = kissFFTModule;\r\n\r\n        class FFT implements InterfaceFFT {\r\n            size: number;\r\n            fcfg: number;\r\n            icfg: number;\r\n            inptr: number;\r\n            outptr: number;\r\n            cin: Float32Array;\r\n            cout: Float32Array;\r\n            constructor(size: number) {\r\n                this.size = size;\r\n                this.fcfg = _kiss_fft_alloc(size, false);\r\n                this.icfg = _kiss_fft_alloc(size, true);\r\n\r\n                this.inptr = kissFFTModule._malloc(size * 8 + size * 8);\r\n                this.outptr = this.inptr + size * 8;\r\n\r\n                this.cin = new Float32Array(kissFFTModule.HEAPU8.buffer, this.inptr, size * 2);\r\n                this.cout = new Float32Array(kissFFTModule.HEAPU8.buffer, this.outptr, size * 2);\r\n            }\r\n\r\n            forward(cin: ArrayLike<number>) {\r\n                this.cin.set(cin);\r\n                _kiss_fft(this.fcfg, this.inptr, this.outptr);\r\n                return new Float32Array(kissFFTModule.HEAPU8.buffer, this.outptr, this.size * 2);\r\n            }\r\n\r\n            inverse(cpx: ArrayLike<number>) {\r\n                this.cin.set(cpx);\r\n                _kiss_fft(this.icfg, this.inptr, this.outptr);\r\n                return new Float32Array(kissFFTModule.HEAPU8.buffer, this.outptr, this.size * 2);\r\n            }\r\n\r\n            dispose() {\r\n                _free(this.inptr);\r\n                _kiss_fft_cleanup();\r\n            }\r\n        }\r\n\r\n        class FFTR implements InterfaceFFT {\r\n            size: number;\r\n            fcfg: number;\r\n            icfg: number;\r\n            rptr: number;\r\n            cptr: number;\r\n            ri: Float32Array;\r\n            ci: Float32Array;\r\n            constructor(size: number) {\r\n                this.size = size;\r\n                this.fcfg = _kiss_fftr_alloc(size, false);\r\n                this.icfg = _kiss_fftr_alloc(size, true);\r\n\r\n                this.rptr = _malloc(size * 4 + (size + 2) * 4);\r\n                this.cptr = this.rptr + size * 4;\r\n\r\n                this.ri = new Float32Array(kissFFTModule.HEAPU8.buffer, this.rptr, size);\r\n                this.ci = new Float32Array(kissFFTModule.HEAPU8.buffer, this.cptr, size + 2);\r\n            }\r\n\r\n            forward(real: ArrayLike<number>) {\r\n                this.ri.set(real);\r\n                _kiss_fftr(this.fcfg, this.rptr, this.cptr);\r\n                return new Float32Array(kissFFTModule.HEAPU8.buffer, this.cptr, this.size + 2);\r\n            }\r\n\r\n            inverse(cpx: ArrayLike<number>) {\r\n                this.ci.set(cpx);\r\n\t            _kiss_fftri(this.icfg, this.cptr, this.rptr);\r\n\t            return new Float32Array(kissFFTModule.HEAPU8.buffer, this.rptr, this.size);\r\n            }\r\n\r\n            dispose() {\r\n                _free(this.rptr);\r\n                _kiss_fft_cleanup();\r\n            }\r\n        }\r\n\r\n        this.FFT = FFT;\r\n        this.FFTR = FFTR\r\n    }\r\n}\r\n\r\nexport default KissFFT;\r\n"],
  "mappings": "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",
  "names": []
}
